version: '3.7'

# Deploy:
# docker stack deploy --compose-file=docker-stack.caddy.yml {{cookiecutter.django_project_name}}

services:
  caddy:
    # You could use a volume to mount Caddyfile. Pros: Easy; Cons: No good for replicated services
    # You could use Docker Configs to mount Caddyfile. Pros: Good for replicated env; Cons: You could not be used to immutable configs
    # image: douglasmiranda/caddy
    # You may want to build your own image, with you own Caddyfile.
    # ./caddy/Caddyfile
    # ./caddy/Dockerfile
    image: {{cookiecutter.django_project_name}}/caddy
    environment:
      DOMAIN_NAME: {{cookiecutter.domain_name}}
    volumes:
      - caddy:/home/caddy/.caddy
    ports:
      - "80:80"
      - "443:443"
    healthcheck:
      test:
        - "CMD-SHELL"
        - "wget --spider http://localhost:7777 || exit 1"
      interval: 15s
      retries: 6
      # When Caddy is requesting a Let's encrypt certificate it can take some time
      start_period: 120s
    deploy:
      mode: replicated
      replicas: 2
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 40s
      rollback_config:
        parallelism: 1
        delay: 10s
        order: stop-first
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
        failure_action: rollback

volumes:
  # This volume is useful for caddy to store the certificates.
  # Then you are free to make the container disposable.
  # (when using Docker Swarm the containers are often removed and replaced to a new one)
  # if you don't store your certificates in a volume, every new container will request
  # new certificates on Let's Encrypt, and that may reach the API calls limit.
  caddy: {}
